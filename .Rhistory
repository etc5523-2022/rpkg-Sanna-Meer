available::available("fastfoodbreakdown")
available.packages("fastfoodnutrition")
available::available("fastfood")
install.packages("available")
available::available("fastfood")
available::available("fastfoodworld")
usethis::create_package("fastfoodworld")
usethis::use_mit_license()
library(usethis)
usethis::use_data_raw()
usethis::usedata("fastfoodinfo")
usethis::use_data("fastfoodinfo")
usethis::use_data("fastfoodinfo")
usethis::use_data(fastfoodinfo)
usethis::use_data(fastfoodinfo)
usethis::use_data("fastfoodinfo")
usethis::use_data(fastfoodinfo, overwrite = TRUE)
## code to prepare `DATASET` dataset goes here
read.csv("data-raw/fastfood_calories.csv")
## code to prepare `DATASET` dataset goes here
fastfoodinfo <- read.csv("data-raw/fastfood_calories.csv")
usethis::use_data(fastfoodinfo, overwrite = TRUE)
usethis::use_r("data")
devtools::document()
?fastfoodinfo
head(fastfoodinfo)
head(fastfoodinfo, 5)
?cars
?mtcars
?fastfoodinfo
unique(fastfoodinfo$restaurant)
?fastfoodinfo
library(fastfoodworld)
install.packages("Rtools")
?fastfoodinfo
#' [,11]	protein	Protein content in grams
#' [,11]	vit_a Vitamin A quantity in grams
#' [,11]  vit_c Vitamin C quantity in grams
#' [,11]	calcium Calcium quantity in grams
#' [,11]	salad	salad quanitity(misc)
#'
#' \describe{
#'   \item{fastfooditems}{A list of food items with various nutrional component values}
#' }
#' @source \url{https://fastfoodnutrition.org/}
"fastfoodinfo"
library(fastfoodworld)
?fastfoodinfo
library(fastfoodworld)
?fastfoodinfo
library(fastfoodworld)
?fastfoodinfo
library(fastfoodworld)
?fastfoodinfo
?fastfoodinfo
library(fastfoodworld)
?fastfoodinfo
?fastfoodinfo
library(fastfoodworld)
?fastfoodinfo
?fastfoodinfo
#' @keywords datasets
#'
#' @name fastfoodinfo
#'
#' @usage data(fastfoodinfo)
#'
#' @source \url{https://fastfoodnutrition.org/}
"fastfoodinfo"
?fastfoodinfo
library(fastfoodworld)
library(fastfoodworld)
?fastfoodinfo
library(fastfoodworld)
#' Nutritional content of Fast food items
#'
#'@description
#'This data is taken from the *Fast Food Nutrition* website and comprises of 8 famous fast food chains along with their items and gives a nutritional breakdown of these contents
#'
#' @format A data frame with  9287 observations on 18 variables. The variables are as follows :
#'
#' \itemize{
#' \item	**restaurant**	Name of fast food restaurant
#' \item	**item**	Fast food item from that restaurant
#' \item	**calories**	Calories in Kilo Joules
#' \item	**cal_fat**	calories from fat in Kilo Joules
#' \item	**total_fat**	Total fat in grams
#' \item	**sat_fat**	saturated fat in grams
#' \item	**trans_fat**	trans-unsaturated fats
#' \item	**cholesterol**	Cholesterol in milli-grams
#' \item	**Sodium** Sodium content in milli-grams
#' \item	**total_carb**	total Number of carbohydrates in grams
#' \item	**fiber** Fiber content in grams
#' \item	**sugar**	Sugar content in grams
#' \item	**protein**	Protein content in grams
#' \item	**vit_a** Vitamin A quantity in grams
#' \item  **vit_c** Vitamin C quantity in grams
#' \item	**calcium** Calcium quantity in grams
#' \item	**salad**	salad quanitity(misc)
library(fastfoodworld)
?fastfoodinfo
glimpse(mtcars)
head(mtcars, 5)
?mtcars
?iris
data()
?quakes
head(quakes,3)
?sleep
?faithful
?airquality
require(graphics)
pairs(airquality, panel = panel.smooth, main = "airquality data")
#' Nutritional content of Fast food items
#'
#'@description
#'This data is taken from the *Fast Food Nutrition* website and comprises of 8 famous fast food chains along with their items and gives a nutritional breakdown of these contents
#'
#' @format A data frame with  9287 observations on 18 variables. The variables are as follows :
#'
#' \itemize{
#' \item	**restaurant**	Name of fast food restaurant
#' \item	**item**	Fast food item from that restaurant
#' \item	**calories**	Calories in Kilo Joules
#' \item	**cal_fat**	calories from fat in Kilo Joules
#' \item	**total_fat**	Total fat in grams
#' \item	**sat_fat**	saturated fat in grams
#' \item	**trans_fat**	trans-unsaturated fats
#' \item	**cholesterol**	Cholesterol in milli-grams
#' \item	**Sodium** Sodium content in milli-grams
#' \item	**total_carb**	total Number of carbohydrates in grams
#' \item	**fiber** Fiber content in grams
#' \item	**sugar**	Sugar content in grams
#' \item	**protein**	Protein content in grams
#' \item	**vit_a** Vitamin A quantity in grams
#' \item  **vit_c** Vitamin C quantity in grams
#' \item	**calcium** Calcium quantity in grams
#' \item	**salad**	salad quanitity(misc)
#'}
#'
#' @docType data
#' @keywords datasets
#'
#' @name fastfoodinfo
#'
#' @usage data(fastfoodinfo)
#'
#' @source \url{https://fastfoodnutrition.org/}
#'
#' @examples
#' require(graphics)
pairs(fastfoodinfo, panel = panel.smooth, main = "fastfood data")
devtools::load_all(".")
rlang::last_error()
library(fastfoodworld)
?fastfoodinfo
library(fastfoodworld)
?fastfoodinfo
??fastfoodinfo
library(fastfoodworld)
library(fastfoodworld)
?fastfoodinfo
library(fastfoodworld)
?fastfoodinfo
library(fastfoodworld)
?fastfoodinfo
?fastfoodworld::fastfoodinfo
?fastfoodworld:::fastfoodinfo
library(fastfoodworld)
?fastfoodinfo
install.packages("fastfoodworld")
install.packages("fastfoodworld")
library(fastfoodworld)
devtools::document()
devtools::install()
library(fastfoodworld)
run_app()
run_app()
run_app()
install.packages("fastfoodworld")
install.packages("fastfoodworld")
install.packages("fastfoodworld")
library(fastfoodworld)
run_app()
run_app()
library(fastfoodworld)
run_app()
no
library(fastfoodworld)
run_app()
library(fastfoodworld)
run_app()
Encoding(levels(english_monarchs$name)) <- "latin1"
levels(english_monarchs$name) <- iconv(
levels(english_monarchs$name),
"latin1",
"UTF-8"
)
Encoding(levels(fastfoodinfo$item)) <- "latin1"
levels(fastfoodinfo$item) <- iconv(
levels(fastfoodinfo$item),
"latin1",
"UTF-8"
)
library(fastfoodworld)
library(fastfoodworld)
unique(fastfoodinfo$restaurant)
library(fastfoodworld)
head(fastfoodinfo, 5)
library(fastfoodworld)
head(fastfoodinfo, 5)
library(fastfoodworld)
library(fastfoodworld)
head(fastfoodinfo, 5)
library(fastfoodworld)
head(fastfoodinfo, 5)
fastfoodworld::run_app()
devtools::load_all(".")
library(fastfoodworld)
head(fastfoodinfo, 5)
install.packages("fastfoodworld")
install.packages("fastfoodworld")
install.packages("fastfoodworld")
devtools::load_all(".")
library(fastfoodworld)
head(fastfoodinfo, 5)
head(fastfoodinfo)
library(fastfoodworld)
head(fastfoodinfo)
head(fastfoodinfo, 5)
library(fastfoodworld)
head(fastfoodinfo, 5)
# reading the data into an object using read_csv function
fastfoodinfo <- read.csv("data-raw/fastfood_calories.csv")
#use_data from the use this package to run this and create a binary version of this data in the folder "data"
usethis::use_data(fastfoodinfo, overwrite = TRUE)
library(fastfoodworld)
head(fastfoodinfo)
library(fastfoodworld)
?fastfoodinfo
run_app()
usethis::use_r("fastfood")
usethis::use_test()
library(fastfoodworld)
?fastfoodinfo
run_app()
devtools::load_all(".")
calorie_quantity(Big Mac)
calorie_quantity(BigMac)
calorie_quantity(\"$Big Mac\")
calorie_quantity(\"$Big Mac\")
calorie_quantity(\"$Big Mac\")
calorie_quantity(\"$Big Mac\")
calorie_quantity(Cheeseburger)
devtools::load_all(".")
calorie_quantity(Cheeseburger)
devtools::load_all(".")
calorie_quantity(Cheeseburger)
devtools::load_all(".")
calorie_in_Kg(380)
calorie_in_Kg(600)
library(testthat)
test_that("calories conversion works", {
expect_equal(380 / 1000, 0.38)
})
devtools::load_all(".")
average_value(cal_fat)
devtools::load_all(".")
average_value(cal_fat)
devtools::load_all(".")
vit_A(Cheeseburger)
vit_A("Cheeseburger")
vit_A("Cheeseburger")
devtools::load_all(".")
vit_A("Cheeseburger")
devtools::load_all(".")
sugar_content(6)
sugar_content(7)
sugar_content(4)
devtools::load_all(".")
sugar_content(4)
sugar_content(15)
devtools::load_all(".")
test_that("sugar quantity is correct", {
library(stringr)
expect_true(15, "High Sugar Quantity")
})
devtools::load_all(".")
test_that("sugar quantity is correct", {
library(stringr)
expect_output(15, "High Sugar Quantity")
})
devtools::load_all(".")
test_that("sugar quantity is correct", {
library(stringr)
verify_output(15, "High Sugar Quantity")
})
devtools::load_all(".")
test_that("sugar quantity is correct", {
library(stringr)
print_output(15, "High Sugar Quantity")
})
devtools::load_all(".")
?sugar_content()
?calories_in_Kg
run_app()
top_5_cholesterol <- function(restaurant) {
top_5_items <- reactive({
fastfoodinfo %>%
# MODIFY CODE BELOW: Filter for the selected rest
filter(restaurant == input$choice) %>%
head(sort(cholesterol,decreasing=TRUE),n=5)
})
}
devtools::load_all(".")
devtools::load_all(".")
top_5_cholesterol(McDonalds)
devtools::load_all(".")
top_5_cholesterol(McDonalds)
run_app()
devtools::load_all(".")
devtools::load_all(".")
top_5_cholesterol(Mcdonalds)
top_5_cholesterol("Mcdonalds")
devtools::load_all(".")
top_5_cholesterol(Mcdonalds)
calories_in_Kg(45)
top_5_cholesterol(Mcdonalds)
devtools::load_all(".")
top_5_cholesterol(Mcdonalds)
devtools::load_all(".")
top_5_cholesterol(Mcdonalds)
top_5_cholesterol(Mcdonalds)
top_5_cholesterol(Mcdonalds)
top_5_cholesterol("Mcdonalds")
devtools::load_all(".")
top_5_cholesterol("Mcdonalds")
top_5_cholesterol()
top_5_cholesterol(Mcdonalds)
top_5_cholesterol(Chic Fill-A)
run_app()
devtools::load_all(".")
devtools::load_all(".")
top_5_cholesterol(Mcdonalds)
calories_in_Kg()
devtools::load_all(".")
calories_in_Kg()
devtools::load_all(".")
calories_in_Kg()
calories_in_Kg(60)
calories_in_Kg(600)
devtools::load_all(".")
?top_5_cholesterol
devtools::load_all(".")
rm(list = c("top_5_cholesterol"))
devtools::load_all(".")
?top_5_cholesterol
source("~/Sem2/ETC5523_cwd/Assessment2/rpkg-Sanna-Meer/R/fastfood.R")
devtools::load_all(".")
rm(list = c("calories_in_Kg", "cholesterol", "sugar_content"))
devtools::load_all(".")
cholesterol(Mcdonalds)
devtools::load_all(".")
cholesterol(Subway)
source("~/Sem2/ETC5523_cwd/Assessment2/rpkg-Sanna-Meer/R/fastfood.R")
devtools::load_all(".")
rm(list = c("calories_in_Kg", "cholesterol", "sugar_content"))
devtools::load_all(".")
cholesterol(Mcdonalds)
devtools::load_all(".")
cholesterol(Mcdonalds)
devtools::load_all(".")
devtools::load_all(".")
cholesterol(Mcdonalds)
devtools::load_all(".")
cholesterol(Mcdonalds)
devtools::load_all(".")
cholesterol(Subway)
devtools::load_all(".")
cholesterol(Subway)
usethis::use_vignette(name = "fastfoodworld",)
browseVignettes()
browseVignettes("praise")
browseVignettes("shiny")
browseVignettes("ggplot2")
library(fastfoodworld)
summary(fastfoodinfo)
library(fastfoodworld)
glimpse(fastfoodinfo)
head(fastfoodinfo, 2)
run_app <- function() {
app_dir <- system.file("myapp", package = "fastfoodworld")
shiny::runApp(app_dir, display.mode = "normal")
run_app <- function() {
app_dir <- system.file("myapp", package = "fastfoodworld")
shiny::runApp(app_dir, display.mode = "normal")
}
run_app <- function() {
app_dir <- system.file("myapp", package = "fastfoodworld")
shiny::runApp(app_dir, display.mode = "normal")
}
calories_in_Kg <- function(calories) {
if (is.null(calories))
print("calories argument is missing")
else
cal <- calories/1000
return(cal)
}
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(fastfoodworld)
head(fastfoodinfo, 2)
run_app <- function() {
app_dir <- system.file("myapp", package = "fastfoodworld")
shiny::runApp(app_dir, display.mode = "normal")
}
calories_in_Kg <- function(calories) {
if (is.null(calories))
print("calories argument is missing")
else
cal <- calories/1000
return(cal)
}
sugar_content(50)
sugar_content(5)
devtools::build()
browseVignettes("fastfoodworld")
devtools::load_all(".")
rm(list = c("calories_in_Kg", "run_app"))
library(fastfoodworld)
library(fastfoodworld)
usethis::shiny()
library(fastfoodworld)
usethis::use_package(shiny)
usethis::use_package(shinyApp())
usethis::use_package("shiny")
library(fastfoodworld)
usethis::use_pipe()
usethis::use_package("dplyr")
source("~/.active-rstudio-document", echo=TRUE)
pwd(0)
pwd()
getwd()
setwd("C:/Users/Sanna Meer/Documents/Sem2/ETC5523_cwd/Assessment2/rpkg-Sanna-Meer")
source("~/.active-rstudio-document", echo=TRUE)
setwd("C:/Users/Sanna Meer/Documents/Sem2/ETC5523_cwd/Assessment2/rpkg-Sanna-Meer")
usethis::use_readme_rmd()
library(fastfoodworld)
head(fastfoodinfo, 2)
library(fastfoodworld)
head(fastfoodinfo, 5)
run_app <- function() {
app_dir <- system.file("myapp", package = "fastfoodworld")
shiny::runApp(app_dir, display.mode = "normal")
}
